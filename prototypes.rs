/* automatically generated by rust-bindgen */

pub type Enum_iio_endian = ::libc::c_uint;
pub const IIO_BE: ::libc::c_uint = 0;
pub const IIO_LE: ::libc::c_uint = 1;
#[repr(C)]
pub struct Struct_iio_channel_info {
    pub name: *mut ::libc::c_char,
    pub generic_name: *mut ::libc::c_char,
    pub scale: ::libc::c_float,
    pub offset: ::libc::c_float,
    pub index: ::libc::c_uint,
    pub bytes: ::libc::c_uint,
    pub bits_used: ::libc::c_uint,
    pub shift: ::libc::c_uint,
    pub mask: ::libc::c_uint,
    pub is_signed: ::libc::c_uint,
    pub enabled: ::libc::c_uint,
    pub endianness: Enum_iio_endian,
    pub extra_field: *mut ::libc::c_void,
}
extern "C" { }
extern "C" {
    pub fn set_dev_paths(device_name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn read_sysfs_string(filename: *const ::libc::c_char,
                             basedir: *const ::libc::c_char,
                             str: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn set_debugfs_paths(device_name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn read_reg(address: ::libc::c_uint) -> ::libc::c_int;
    pub fn write_reg(address: ::libc::c_uint, val: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn write_devattr(attr: *const ::libc::c_char,
                         str: *const ::libc::c_char) -> ::libc::c_int;
    pub fn read_devattr(attr: *const ::libc::c_char,
                        str: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn read_devattr_bool(attr: *const ::libc::c_char,
                             value: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn read_devattr_double(attr: *const ::libc::c_char,
                               value: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn write_devattr_double(attr: *const ::libc::c_char,
                                value: ::libc::c_double) -> ::libc::c_int;
    pub fn write_devattr_int(attr: *const ::libc::c_char,
                             val: ::libc::c_ulonglong) -> ::libc::c_int;
    pub fn read_devattr_int(attr: *mut ::libc::c_char,
                            val: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn read_devattr_slonglong(attr: *const ::libc::c_char,
                                  value: *mut ::libc::c_longlong)
     -> ::libc::c_int;
    pub fn write_devattr_slonglong(attr: *const ::libc::c_char,
                                   value: ::libc::c_longlong)
     -> ::libc::c_int;
    pub fn iio_devattr_exists(device: *const ::libc::c_char,
                              attr: *const ::libc::c_char) -> ::libc::c_uchar;
    pub fn iio_buffer_open(read: ::libc::c_uchar, flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn find_scan_elements(dev: *mut ::libc::c_char,
                              elements: *mut *mut ::libc::c_char,
                              access: ::libc::c_uint) -> ::libc::c_int;
    pub fn scan_elements_sort(elements: *mut *mut ::libc::c_char);
    pub fn scan_elements_insert(elements: *mut *mut ::libc::c_char,
                                token: *mut ::libc::c_char,
                                end: *mut ::libc::c_char);
}
